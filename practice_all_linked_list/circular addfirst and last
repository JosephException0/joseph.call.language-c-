#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

class SinglyCircularLL {
private:
    Node* tail;
public:
    SinglyCircularLL() : tail(nullptr) {}

    void addFirst(int data) {
        Node* n=new Node;
        n->data=data;
        if(!tail){
            tail=n;
            tail->next=tail;
        }else{
            n->next=tail->next;
            tail->next=n;
        }
        
        
    }

    void addLast(int data) {
        Node* n=new Node;
        n->data=data;
        if(!tail){
            tail=n;
            tail->next=tail;
        }else{
            n->next=tail->next;
            tail->next=n;
            tail=n;
        }
    }

    void rotate(int k) {
        if(!tail){
            return;
        }
        for(int i=0;i<k;i++){
            tail=tail->next;
        }
    }

    void print() {
        if(!tail){
        return;
        }    
        Node* n=tail->next;
        do{
            cout<<n->data<<" ";
            n=n->next;
            
        }while(n!=tail->next);
        
    }
};

int main() {
    SinglyCircularLL list;
    list.addFirst(10);
    list.addLast(20);
    list.addLast(30);
    list.rotate(1);  // Move the tail to the next node
    list.print();    // Output: 20 30 10
    return 0;
}
