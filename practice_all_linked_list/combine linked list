#include <iostream>

class Doubly {
private:
    struct Node {
        int data;
        Node* prev;
        Node* next;
        Node(int val) : data(val), prev(nullptr), next(nullptr) {}
    };

    Node* head;
    Node* tail;
    int size;

public:
    Doubly() : head(nullptr), tail(nullptr), size(0) {}

    ~Doubly() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    void pushBack(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
        size++;
    }

    void print() const {
        Node* current = head;
        while (current) {
            std::cout << current->data << " ";
            current = current->next;
        }
        std::cout << std::endl;
    }
    //todo///
    void combine(Doubly* other) {
        if (!head) {
            head = other->head;
            tail = other->tail;
        } else {
            tail->next = other->head;
            if (other->head) {
                other->head->prev = tail;
            }
            if (other->tail) {
                tail = other->tail;
            }
        }
        size += other->size;
        
        // Clean up the other list
        other->head = nullptr;
        other->tail = nullptr;
        other->size = 0;
    }

    int getSize() const {
        return size;
    }
};

int main() {
    Doubly list1, list2;

    // Populate list1
    list1.pushBack(1);
    list1.pushBack(2);
    list1.pushBack(3);

    // Populate list2
    list2.pushBack(4);
    list2.pushBack(5);
    list2.pushBack(6);

    std::cout << "List 1: ";
    list1.print();
    std::cout << "List 2: ";
    list2.print();

    list1.combine(&list2);

    std::cout << "After combining:" << std::endl;
    std::cout << "List 1: ";
    list1.print();
    std::cout << "List 2: ";
    list2.print();

    std::cout << "Size of list 1: " << list1.getSize() << std::endl;
    std::cout << "Size of list 2: " << list2.getSize() << std::endl;

    return 0;
}
