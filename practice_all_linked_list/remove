#include <iostream>

struct Node {
    int data;
    Node* prev;
    Node* next;

    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;

public:
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}

    // Method to remove the first node
    void removeFirst() {
        if (!head) return;  // List is empty
        Node* temp = head;
        if (head == tail) {  // Only one element
            head = tail = nullptr;
        } else {
            head = head->next;
            head->prev = nullptr;
        }
        delete temp;
    }

    // Method to remove the last node
    void removeLast() {
        if (!tail) return;  // List is empty
        Node* temp = tail;
        if (head == tail) {  // Only one element
            head = tail = nullptr;
        } else {
            tail = tail->prev;
            tail->next = nullptr;
        }
        delete temp;
    }

    //todo///
    void removeNode(Node* n) {
        if (!n) return;  // Null node passed

        if (n == head) {  // If the node to be removed is the first node
            removeFirst();
        } else if (n == tail) {  // If the node to be removed is the last node
            removeLast();
        } else {  // Node is somewhere in the middle
            n->prev->next = n->next;
            n->next->prev = n->prev;
            delete n;
        }
    }

    // Utility method to add a node at the end (for testing purposes)
    void append(int data) {
        Node* newNode = new Node(data);
        if (!head) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }

    // Utility method to print the list
    void printList() {
        Node* temp = head;
        while (temp) {
            std::cout << temp->data << " ";
            temp = temp->next;
        }
        std::cout << std::endl;
    }
};

int main() {
    DoublyLinkedList dll;
    dll.append(1);
    dll.append(2);
    dll.append(3);
    dll.append(4);
    dll.append(5);

    dll.printList();  // Output: 1 2 3 4 5

    Node* nodeToRemove = dll.head->next->next;  // Removing the node with value 3
    dll.removeNode(node
